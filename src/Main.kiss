(loadFrom "kiss-vscode-api" "src/Util.kiss")
(loadFrom "kiss-vscode-api" "src/KissUtil.kiss")

@(:expose "activate")
(function activate [:ExtensionContext context]
    (printThroughInfoMessage)
    (awaitLetCatchThroughErrorMessage)

    // Add your extension's commands here with (defCommand <...>):
    (defCommand context startRecording "start transcribing" "C-; C-r" []

        (let [:Dynamic mic (js.Lib.require "mic")
                :Dynamic fs (js.Lib.require "fs")
                :Dynamic micInstance (mic (object rate "16000"
                                                channels "1"
                                                debug true
                                                exitOnSilence 6))
                :Dynamic micInputStream (micInstance.getAudioStream)
                :Dynamic outputFileStream ~(fs.WriteStream "output.wav")]
                ~(Sys.getCwd)
                (micInputStream.pipe outputFileStream)
                (micInputStream.on "data" ->data {
                    (print "Recieved Input Stream: ${data.length}")
                })
                (micInputStream.on "error" ->err {
                    (print "Error in Input Stream: ${err}")
                })
                (micInputStream.on "startComplete" -> {
                    (print "SIGNAL startComplete")
                })
                (micInputStream.on "stopComplete" -> {
                    (print "Got SIGNAL stopComplete")
                })
                (micInputStream.on "silence" ->err {
                    (print "Got SIGNAL silence")
                    (micInstance.stop)
                })
                (micInstance.start)
            )
/*
var mic = require('mic');
var fs = require('fs');

var micInstance = mic({
    rate: '16000',
    channels: '1',
    debug: true,
    exitOnSilence: 6
});
var micInputStream = micInstance.getAudioStream();

var outputFileStream = fs.WriteStream('output.raw');

micInputStream.pipe(outputFileStream);

micInputStream.on('data', function(data) {
    console.log("Recieved Input Stream: " + data.length);
});

micInputStream.on('error', function(err) {
    console.log("Error in Input Stream: " + err);
});

micInputStream.on('startComplete', function() {
    console.log("Got SIGNAL startComplete");
    setTimeout(function() {
            micInstance.pause();
    }, 5000);
});
    
micInputStream.on('stopComplete', function() {
    console.log("Got SIGNAL stopComplete");
});
    
micInputStream.on('pauseComplete', function() {
    console.log("Got SIGNAL pauseComplete");
    setTimeout(function() {
        micInstance.resume();
    }, 5000);
});

micInputStream.on('resumeComplete', function() {
    console.log("Got SIGNAL resumeComplete");
    setTimeout(function() {
        micInstance.stop();
    }, 5000);
});

micInputStream.on('silence', function() {
    console.log("Got SIGNAL silence");
});

micInputStream.on('processExitComplete', function() {
    console.log("Got SIGNAL processExitComplete");
});

micInstance.start();
*/
        )
    
    // Add your extension's configuration here with (defConfiguration <...>):
    // (defConfiguration 
    //      :Bool configBool
    //          (object
    //              default false)
    //      :String configString
    //          (object
    //              default ""))
    )