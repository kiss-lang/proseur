(loadFrom "kiss-vscode-api" "src/Util.kiss")
(loadFrom "kiss-vscode-api" "src/KissUtil.kiss")

(var &mut looping false)

@(:expose "activate")
(function activate [:ExtensionContext context]
    (printThroughInfoMessage)
    (awaitLetCatchThroughErrorMessage)

    // Add your extension's commands here with (defCommand <...>):
    (defCommand context stopRecording "stop transcribing" "C-; C-d" []
        (set looping false))

    (defCommand context startRecording "start transcribing" "C-; C-r" []
    	(unless activeTextEditor?.document?.fileName
            (print "Open a text file to transcribe in!")
            (return))

        (let [file activeTextEditor.document.fileName
                wavFolder "${file}.dir"]
            (Sys.setCwd (file.directory))
            (let [&mut num (if (FileSystem.isDirectory wavFolder)
                                        .length (FileSystem.readDirectory wavFolder)
                                    {
                                        (FileSystem.createDirectory wavFolder)
                                        0
                                    })
                    :Dynamic mic (js.Lib.require "mic")
                    :Dynamic fs (js.Lib.require "fs")]

                (localFunction nextFile []
                    (localVar :Dynamic micInstance (mic (object rate "48000"
                                                                channels "1"
                                                                debug true
                                                                exitOnSilence 6
                                                                fileType "wav")))
                    (localVar :Dynamic micInputStream (micInstance.getAudioStream))
                    (micInputStream.pipe (fs.WriteStream "${wavFolder}/${num}.wav"))
                    (micInputStream.on "data" ->data {
                        // (print "Recieved Input Stream: ${data.length}")
                    })
                    (micInputStream.on "error" ->err {
                        (print "Error in Input Stream: ${err}")
                    })
                    (micInputStream.on "startComplete" -> {
                        // (print "SIGNAL startComplete")
                    })
                    (micInputStream.on "stopComplete" -> {
                        // (print "Got SIGNAL stopComplete")
                        // Put marker into text file for the new wav file
                        (startTranscribing wavFolder num)
                        
                        ++num
                        (when looping
                            (nextFile))
                    })
                    (micInputStream.on "silence" ->err {
                        // (print "Got SIGNAL silence")
                        (micInstance.stop)
                    })
                    (micInstance.start))

                (set looping true)
                (nextFile)))
    (return))
    
    (function startTranscribing [wavFolder num]
        (awaitLet [&sync marker "{${num}.wav}"
                    result (activeTextEditor.edit
                        (lambda [e]
                            (let [editor activeTextEditor]
                                (e.insert editor.selection.active "${marker}\n"))))]
            (when result
            	// TODO make language and model options
                (ChildProcess.exec "$whisperPath --output_format txt --language English --model turbo \"${wavFolder}/${num}.wav\""
                    (object cwd wavFolder)
                	->[error :String stdout stderr] {
                        (when stderr (errorMessage stderr))

                        (let [output (stdout.substr (+ 2 (stdout.indexOf "]")))
                                markerStart (.indexOf (activeTextEditor.document.getText) marker)
                                markerEnd (+ markerStart marker.length)
                                range (new Range (toPosition markerStart) (toPosition markerEnd))]
                            (activeTextEditor.edit ->e (e.replace range output)))                      
                    }))))
    
    // Add your extension's configuration here with (defConfiguration <...>):
    (defConfiguration 
    //  :Bool configBool
    //      (object
    //          default false)
        :String whisperPath
            (object
                default ""))
    )